// Karma configuration
module.exports = function(config) {
    config.set({

    // base path that will be used to resolve all patterns (eg. files, exclude)
        basePath: '../../',

    // frameworks to use
    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
        frameworks: ['jasmine','browserify'],

    // list of files / patterns to load in the browser
        files: [
            'node_modules/babel-polyfill/dist/polyfill.js',
            'bower_components/angular/angular.js',
            'bower_components/angular-mocks/angular-mocks.js',
            'wwwroot/libs/allLibs.min.js',
            'wwwroot/all.js',
            'sources/**/*.js',
            'sources/const.js',
            'test/unit/*.js',
            'test/e2e/*.js',
            'test/integration/*.js',
        ],

        plugins: [			   
            'karma-jasmine',
            'karma-chrome-launcher',
            'karma-phantomjs-launcher',
            'karma-html-detailed-reporter',
            'karma-browserify',
            'karma-coverage',
            'karma-sourcemap-loader',
            'karma-babel-preprocessor'
        ],

    //browsers: ['Chrome_without_security', 'phantomJS'],

        customLaunchers: {
            Chrome_without_security: {
                base: 'Chrome',
                flags: ['--disable-web-security'],
        //chromeDataDir: __dirname //path.resolve(__dirname, '.chrome')
            }
        },

    //phantomjsLauncher: {
      // Have phantomjs exit if a ResourceError is encountered (useful if karma exits without killing phantom)
    //  exitOnResourceError: true
    //},

        browserify: {
      //debug: true
      //transform: [ 'brfs' ],
      //configure: function(bundle) {
      //  bundle.on('prebundle', function() {
      //    bundle.external('foobar');
      //  });
      
        },
    // preprocess matching files before serving them to the browser
    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
        preprocessors: {
            'test/**/*.js': ['sourcemap','browserify']
        ,'sources/**/*.js': ['sourcemap','coverage']
        },

        babelPreprocessor: {
            options: {
                presets: ['es2015'],
                sourceMap: 'inline'
            },
            filename: function (file) {
                return file.originalPath.replace(/\.js$/, '.es5.js');
            },
            sourceFileName: function (file) {
                return file.originalPath;
            }
        },

    // test results reporter to use
    // possible values: 'dots', 'progress'
    // available reporters: https://npmjs.org/browse/keyword/karma-reporter
        reporters: ['progress','coverage','htmlDetailed'],

        coverageReporter: {
        // specify a common output directory
            dir: 'test/coverage',
            reporters: [
          //{ type: 'html', subdir: 'report-html' },
          { type: 'lcov', subdir: 'report-lcov' }
            ]
        },

    // configure the HTML-Detailed-Reporter to put all results in one file    
        htmlDetailed: {
            splitResults: false,
            dir:'test/_reports',


        },

    // web server port
        port: 9876,


    // enable / disable colors in the output (reporters and logs)
        colors: true,

    // level of logging
    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
        logLevel: config.LOG_INFO,

    // enable / disable watching file and executing tests whenever any file changes
        autoWatch: true,

    // Continuous Integration mode
    // if true, Karma captures browsers, runs the tests and exits
        singleRun: false,

    // Concurrency level
    // how many browser should be started simultaneous
        concurrency: Infinity
    });
};
